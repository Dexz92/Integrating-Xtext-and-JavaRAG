/*
 * generated by Xtext 2.9.0
 */
package se.lth.cs.jastaddxtext.ast.ui.quickfix

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import se.lth.cs.jastaddxtext.ast.ast.ClassDeclaration
import se.lth.cs.jastaddxtext.ast.ast.Component
import se.lth.cs.jastaddxtext.ast.validation.AstValidator

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
class AstQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(AstValidator.CLASS_NAME_CAPITAL_FIRST_LETTER)
	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Capitalize class name', 'Capitalize the class name.', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			val firstLetter = xtextDocument.get(issue.offset, 1)
			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
		]
	}

	@Fix(AstValidator.MULTIPLE_CLASSES_WITH_SAME_NAME)
	def changeClassName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			'Rename the class name',
			'Changes the class name',
			'upcase.png',
			new ISemanticModification() {

				override apply(EObject element, IModificationContext context) throws Exception {
					val classDecl = (element) as ClassDeclaration
					classDecl.name = classDecl.name + "1";

				}

			}
		)
	}

	@Fix(AstValidator.MULTIPLE_CHILDREN_WITH_SAME_NAME)
	def changeChildName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			'Rename the child name',
			'Changes the name of the child',
			'upcase.png',
			new ISemanticModification() {

				override apply(EObject element, IModificationContext context) throws Exception {
					var compo = (element) as Component
					compo.name = compo.name + "1"

				}

			}
		)
	}

	@Fix(AstValidator.MULTIPLE_CHILDREN_WITH_SAME_TYPE)
	def addChildTypeName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			'Add a name to the type',
			'Adds a standard name to the type',
			'upcase.png',
			new ISemanticModification() {

				override apply(EObject element, IModificationContext context) throws Exception {
					var compo = (element) as Component
					compo.name = "DefaultName"

				}

			}
		)
	}
}
