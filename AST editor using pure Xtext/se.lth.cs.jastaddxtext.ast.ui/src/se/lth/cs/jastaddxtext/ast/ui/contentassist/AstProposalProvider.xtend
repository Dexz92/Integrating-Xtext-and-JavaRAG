/*
 * generated by Xtext 2.9.0
 */
package se.lth.cs.jastaddxtext.ast.ui.contentassist

import org.eclipse.xtext.Keyword
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import java.util.HashSet
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class AstProposalProvider extends AbstractAstProposalProvider {

	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
		ICompletionProposalAcceptor acceptor) {

		var tokens = new HashSet<String>()
		tokens.add(":")
		tokens.add("::=")
		tokens.add(";")

		if (tokens.contains(keyword.value)) {
			return;
		}

		super.completeKeyword(keyword, contentAssistContext, acceptor)
	}

	override complete_ClassDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_ClassDeclaration(model, ruleCall, context, acceptor)

		var className = "DefaultClass;"
		var superClass = "DefaultClass : DefaultSuperClass;"
		var childWithoutSuperClass = "DefaultClass ::= DefaultChild;"
		var childWithSuperClass = "DefaultClass : DefaultSuperClass ::= DefaultChild;"

		acceptor.accept(createCompletionProposal(className, context))
		acceptor.accept(createCompletionProposal(superClass, context))
		acceptor.accept(createCompletionProposal(childWithoutSuperClass, context))
		acceptor.accept(createCompletionProposal(childWithSuperClass, context))

	}

	override complete_Child(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_Child(model, ruleCall, context, acceptor)

		var customChild = "DefaultChild"
		var customChildWithName = "ChildName:Child"
		var customToken = "<DefaultToken>"
		var customTokenInteger = "<TokenName:Integer>"
		var customTokenString = "<TokenName:String>"
		var customOpt = "[DefaultOptional]"
		var customOptWithName = "[ChildName:Child]"
		var customNTA = "/DefaultNTA/"
		var customList = "DefaultChild*"
		var customListWithName = "ChildName:Child*"

		acceptor.accept(createCompletionProposal(customChild, context))
		acceptor.accept(createCompletionProposal(customChildWithName, context))
		acceptor.accept(createCompletionProposal(customToken, context))
		acceptor.accept(createCompletionProposal(customTokenInteger, context))
		acceptor.accept(createCompletionProposal(customTokenString, context))
		acceptor.accept(createCompletionProposal(customOpt, context))
		acceptor.accept(createCompletionProposal(customOptWithName, context))
		acceptor.accept(createCompletionProposal(customNTA, context))
		acceptor.accept(createCompletionProposal(customList, context))
		acceptor.accept(createCompletionProposal(customListWithName, context))
	}

	override complete_TokenComponent(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_TokenComponent(model, ruleCall, context, acceptor)

		var integer = "Integer"
		var string = "String"

		acceptor.accept(createCompletionProposal(integer, context))
		acceptor.accept(createCompletionProposal(string, context))
	}
}
