/*
 * generated by Xtext 2.9.0
 */
package se.lth.cs.jastaddxtext.javaRAG.ast.ui.quickfix

import com.google.inject.Inject
import javax.swing.JFrame
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.ui.editor.XtextEditor
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.ui.editor.utils.EditorUtils
import org.eclipse.xtext.ui.refactoring.ui.IRenameContextFactory
import org.eclipse.xtext.ui.refactoring.ui.IRenameElementContext
import org.eclipse.xtext.ui.refactoring.ui.IRenameSupport
import org.eclipse.xtext.validation.Issue
import se.lth.cs.jastaddxtext.javaRAG.ast.ast.ClassDeclaration
import se.lth.cs.jastaddxtext.javaRAG.ast.ast.Component
import se.lth.cs.jastaddxtext.javaRAG.ast.ast.TokenComponent
import se.lth.cs.jastaddxtext.javaRAG.ast.validation.AstValidator

/**
 * This class has the quick fix functionality
 * 
 */
class AstQuickfixProvider extends DefaultQuickfixProvider {
	@Inject(optional=true)
	IRenameSupport.Factory renameSupportFactory;

	@Inject(optional=true)
	IRenameContextFactory renameContextFactory;

	/**
	 * Renames an EObject
	 * 
	 * @param object - EObject
	 * @param newName - String
	 */
	def rename(EObject object, String newName) throws InterruptedException {
		var XtextEditor editor = EditorUtils.getActiveXtextEditor();

		var IRenameElementContext renameContext = new IRenameElementContext.Impl(EcoreUtil.getURI(object),
			object.eClass(), editor, editor.getSelectionProvider().getSelection(), null);
		var IRenameSupport rename = renameSupportFactory.create(renameContext, newName);
		rename.startDirectRefactoring();
	}

	/*
	 * Creates a JOptionPane
	 */
	private def Object createJOptionPane() {
		var JFrame frame = new JFrame()
		var Object result = JOptionPane.showInputDialog(frame, "Enter new name", "Rename", JOptionPane.PLAIN_MESSAGE);
		return result
	}

	/**
	 * Capitalizes the class name
	 * 
	 * @param issue - Issue
	 * @param acceptor - IssueResolutionAcceptor 
	 */
	@Fix(AstValidator.CLASS_NAME_CAPITAL_FIRST_LETTER)
	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Capitalize class name', 'Capitalizes the first letter of the class name.', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			val firstLetter = xtextDocument.get(issue.offset, 1)
			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
		]
	}

	/**
	 * Renames a class due to duplicates
	 * 
	 * @param issue - Issue
	 * @param acceptor - IssueResolutionAcceptor 
	 */
	@Fix(AstValidator.MULTIPLE_CLASSES_WITH_SAME_NAME)
	def changeClassName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			'Rename the class',
			'Changes the name of the class, due to duplicate names',
			'upcase.png',
			new ISemanticModification() {

				override apply(EObject element, IModificationContext context) throws Exception {
					val classDecl = (element) as ClassDeclaration
					var Object result = createJOptionPane()
					if (result != null) {
						rename(classDecl, result.toString())
					}
				}

			}
		)
	}

	/**
	 * Renames a child due to duplicates
	 * 
	 * @param issue - Issue
	 * @param acceptor - IssueResolutionAcceptor 
	 */
	@Fix(AstValidator.MULTIPLE_CHILDREN_WITH_SAME_NAME)
	def changeChildName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			'Rename the child',
			'Changes the name of the child, due to duplicate names',
			'upcase.png',
			new ISemanticModification() {

				override apply(EObject element, IModificationContext context) throws Exception {
					var EObject comp
					if (element instanceof Component) {
						comp = (element) as Component
					} else if (element instanceof TokenComponent) {
						comp = (element) as TokenComponent
					}
					var Object result = createJOptionPane()
					if (result != null) {
						rename(comp, result.toString())

					}

				}

			}
		)
	}

	/**
	 * Adds a name to a child due to duplicates
	 * 
	 * @param issue - Issue
	 * @param acceptor - IssueResolutionAcceptor
	 */
	@Fix(AstValidator.MULTIPLE_CHILDREN_WITH_SAME_TYPE)
	def addChildTypeName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			'Add a name to the child',
			'Adds a name to the child, due to missing name, only type is defined',
			'upcase.png',
			new ISemanticModification() {

				override apply(EObject element, IModificationContext context) throws Exception {
					var Object result = createJOptionPane()
					if (element instanceof Component) {
						if (result != null) {
							element.name = result.toString()
						}
					} else if (element instanceof TokenComponent) {
						if (result != null) {
							element.name = result.toString();
						}
					}

				}

			}
		)
	}

	/**
	 * Renames a child due to same names are parent
	 * 
	 * @param issue - Issue
	 * @param acceptor - IssueResolutionAcceptor
	 */
	@Fix(AstValidator.CHILD_SAME_NAME_AS_PARENT)
	def changeChildNameAtSameParent(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			'Rename the child',
			'Changes the name of the child, due to same name of child and parent node',
			'upcase.png',
			new ISemanticModification() {

				override apply(EObject element, IModificationContext context) throws Exception {
					var EObject comp
					if (element instanceof Component) {
						comp = (element) as Component
					} else if (element instanceof TokenComponent) {
						comp = (element) as TokenComponent
					}
					var Object result = createJOptionPane()
					if (result != null) {
						rename(comp, result.toString())

					}

				}

			}
		)
	}

	/**
	 * Renames a child due to same name as the type
	 * 
	 * @param issue - Issue
	 * @param acceptor - IssueResolutionAcceptor
	 */
	@Fix(AstValidator.CHILD_NAME_SAME_AS_TYPE)
	def changeChildTypeAtSameParent(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			'Rename the child',
			'Changes the name of the child, due to same name as the type of the node',
			'upcase.png',
			new ISemanticModification() {

				override apply(EObject element, IModificationContext context) throws Exception {
					var EObject comp
					if (element instanceof Component) {
						comp = (element) as Component
					} else if (element instanceof TokenComponent) {
						comp = (element) as TokenComponent
					}
					var Object result = createJOptionPane()
					if (result != null) {
						rename(comp, result.toString())

					}

				}

			}
		)
	}

}
