/*
 * generated by Xtext 2.9.2
 */
package se.lth.cs.jastaddxtext.aspect.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.eclipse.xtext.xbase.XBlockExpression
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xbase.typesystem.IBatchTypeResolver
import org.eclipse.xtext.xtype.XImportSection
import se.lth.cs.jastaddxtext.aspect.aspect.AspectDeclaration
import se.lth.cs.jastaddxtext.aspect.aspect.CacheOrUncache
import se.lth.cs.jastaddxtext.aspect.aspect.ClassDeclaration
import se.lth.cs.jastaddxtext.aspect.aspect.CollectionContribution
import se.lth.cs.jastaddxtext.aspect.aspect.CollectionDeclaration
import se.lth.cs.jastaddxtext.aspect.aspect.Equation
import se.lth.cs.jastaddxtext.aspect.aspect.ImplementStatement
import se.lth.cs.jastaddxtext.aspect.aspect.InheritedDeclaration
import se.lth.cs.jastaddxtext.aspect.aspect.InterTypeDeclaration
import se.lth.cs.jastaddxtext.aspect.aspect.InterfaceDeclaration
import se.lth.cs.jastaddxtext.aspect.aspect.Model
import se.lth.cs.jastaddxtext.aspect.aspect.NTAContribution
import se.lth.cs.jastaddxtext.aspect.aspect.Refine
import se.lth.cs.jastaddxtext.aspect.aspect.Rewrite
import se.lth.cs.jastaddxtext.aspect.aspect.SynthesizedDeclaration

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class AspectLabelProvider extends DefaultEObjectLabelProvider {
	
	@Inject extension  IBatchTypeResolver typeResolver
	
	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(XImportSection model) {
		"Imported declarations"
	}
	
	def image(XImportSection imp) {
		"import.gif"
	}

	def image(Model model) {
		"model.gif"
	}

	def image(AspectDeclaration aspect) {
		"yellow_romb.gif"
	}

	def image(SynthesizedDeclaration syn) {
		"blue_circle.gif"
	}

	def image(InheritedDeclaration inh) {
		"blue_romb.gif"
	}

	def image(Equation syneq) {
		"green_circle.gif"
	}

	def image(CollectionDeclaration collDecl) {
		"grey.gif"
	}

	def image(CollectionContribution collContr) {
		"grey.gif"
	}

	def image(NTAContribution nta) {
		"grey.gif"
	}
	
	def image(Refine ref){
		"grey.gif"
	}
	
	def image(Rewrite rew){
		"grey.gif"
	}
	
	def image(CacheOrUncache cau){
		"grey.gif"
	}

	def image(InterTypeDeclaration type) {
		"blue_triangle.gif"
	}

	def image(ClassDeclaration classDecl) {
		"class.gif"
	}

	def image(ImplementStatement implDecl) {
		"class.gif"
	}

	def image(InterfaceDeclaration interDecl) {
		"interface_obj.gif"
	}
	
	def text(XBlockExpression block){
		"code block"
	}
	
	def text(XExpression exp){
		if(!exp.eContents.isEmpty){
			typeResolver.resolveTypes(exp).getActualType(exp).toString
		}
	}
	def text(Rewrite element){
		if(element.classRef != null){
			element.classRef.name
		}
	}
}